@model ParkingHUB.Pagination.PageResult<ParkingHUB.ViewModel.ParkingListViewModel>

@{
    var TotalSlot = @ViewBag.TotalSlot;
    int totalPages = (int)Math.Ceiling((double)TotalSlot / 10);
}

<h1 class="centered-title">Vehicle Parking for @ViewBag.Location</h1>

<style>
    .pagination-container {
        display: flex;
        justify-content: center;
    }

    .centered-title {
        text-align: center;
        margin-bottom: 1em;
    }

    .occupied {
        border: 2px solid red; 
    }

    .available {
        border: 2px solid green;
    }
</style>

<div class="modal fade" id="addParkingModal" tabindex="-1" aria-labelledby="addParkingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addParkingModalLabel">Add Parking</h5>
            </div>
            <div class="modal-body">
                <form id="addParkingForm" method="post" asp-controller="Parking" asp-action="AddParking">
                    <div class="mb-3">
                        <label for="location" class="form-label">Location</label>
                        <input type="text" class="form-control" id="location" name="Location" asp-for="@Model.Location" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="plateNumber" class="form-label">Plate Number</label>
                        <input type="text" class="form-control" id="plateNumber" name="PlateLicense" asp-for="@Model.PlateLicense">
                    </div>
                    <div class="mb-3">
                        <label for="checkIn" class="form-label">Check in</label>
                        <input type="datetime-local" class="form-control" id="checkIn" name="CheckIn" asp-for="@Model.CheckIn" value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="selectedParkingNumber" class="form-label">Selected Parking Number</label>
                        <input type="text" class="form-control" id="selectedParkingNumber" name="SelectedParkingNumber" readonly>
                    </div>
                    <button type="button" class="btn btn-primary" onclick="saveParking()">Save</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="album py-5 bg-body-tertiary">
    <div class="container">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
            @foreach (var parking in Model.Results)
            {
                <div class="col">
                    <div class="card shadow-sm @((parking.IsOccupied) ? "occupied" : "available")">
                        <div class="card-body">
                            <h5 class="card-title">Vehicle Parking</h5>
                            <p class="card-text">Parking with number: @parking.TotalSlot</p>
                            @if (!parking.IsOccupied)
                            {
                                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addParkingModal" data-parking-number="@parking.NumberParking" onclick="selectParking(@parking.TotalSlot)">Add Parking</button>
                            }
                            else
                            {
                                <p class="card-text">Plate Number: @parking.PlateLicense</p>
                                @* <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#extendParkingModal" data-vehicle-id="@parking.VehicleId" onclick="populateExtendModal(@parking.VehicleId)">Extend Parking</button> *@
                                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#checkOutModal" onclick="checkoutParking('@parking.VehicleId')">Check Out</button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<div class="modal fade" id="checkOutModal" tabindex="-1" aria-labelledby="checkOutModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="checkOutModalLabel">Check Out</h5>
            </div>
            <div class="modal-body">
                <p>Current Check Out Time: @DateTime.Now.ToString("yyyy-MM-dd HH:mm")</p>
                <form id="checkOutForm">
                    <input type="datetime-local" class="form-control" id="checkOut" name="CheckOut" value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" readonly>
                    <div class="row">
                        <div class="col">
                            <label for="cardnumber" class="form-label">Card number</label>
                            <input type="text" class="form-control" id="cardNumber" name="CardNumber">
                        </div>
                        <div class="col">
                            <label for="cvv" class="form-label">CVV</label>
                            <input type="text" class="form-control" id="cvv" name="CVV">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="confirmCheckOut">Confirm Check Out</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="extendParkingModal" tabindex="-1" aria-labelledby="extendParkingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="extendParkingModalLabel">Extend Parking</h5>
            </div>
            <div class="modal-body">
                <form id="extendParkingForm" method="post" asp-controller="Parking" asp-action="ExtendParkingVehicleTime">
                    <div class="mb-3">
                        <label for="newEndTime" class="form-label">New End Time</label>
                        <input type="datetime-local" class="form-control" id="newEndTime" name="NewEndTime" value="@Model.CheckOut">
                    </div>
                    <div class="mb-3">
                        <input type="hidden" id="extendedParkingNumber" name="extendedParkingNumber">
                    </div>
                    <button type="button" class="btn btn-primary" onclick="extendParking()">Extend</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </form>
            </div>
        </div>
    </div>
</div>
<nav aria-label="Page navigation" class="pagination-container">
    <ul class="pagination">
        @if (Model.PreviousPage.HasValue)
        {
            <li class="page-item"><a class="page-link" href="?pageNumber=@Model.PreviousPage&location=@ViewBag.Location">Previous</a></li>
        }

        @for (int i = 1; i <= totalPages; i++)
        {

            <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                <a class="page-link" href="?pageNumber=@i&location=@ViewBag.Location">@i</a>
            </li>
        }

        @if (Model.NextPage.HasValue)
        {
            <li class="page-item"><a class="page-link" href="?pageNumber=@Model.NextPage&location=@ViewBag.Location">Next</a></li>
        }
    </ul>
</nav>

<script>
    function selectParking(parkingNumber) {
        document.getElementById("selectedParkingNumber").value = parkingNumber;
    }
    function populateExtendModal(vehicleId) {
        document.getElementById("extendedParkingNumber").value = vehicleId;
    }

    function saveParking() 
    {
        var location = document.getElementById('location').value;
        var plateLicense = document.getElementById('plateNumber').value;
        var checkIn = document.getElementById('checkIn').value;
        var checkOut = document.getElementById('checkOut').value;
        var selectedParkingNumber = document.getElementById('selectedParkingNumber').value;

        var data = {
            Location: location,
            PlateLicense: plateLicense,
            CheckIn: checkIn,
            CheckOut: checkOut,
            NumberParking: selectedParkingNumber
        };

        fetch('/Parking/AddParking', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.showToast) {
                    alert("Add successfully");
                } else {
                    alert('An error occurred while saving the parking!');
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    function extendParking()
    {
        var newEndTime = document.getElementById('newEndTime').value;
        var extendedParkingNumber = document.getElementById('extendedParkingNumber').value;

        var data = {
            vehicleId: extendedParkingNumber,
            newEndTime: newEndTime
        };
        console.log(data)
        fetch('/Parking/ExtendParkingVehicleTime', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            }) 
            .then(data => {
                if (data.showToast) {
                    alert("Parking time extended successfully");
                } else {
                    alert('An error occurred while extending parking time');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while processing your request.');
            });
    }

    function checkoutParking(vehicleId) 
    {
        document.getElementById("confirmCheckOut").addEventListener("click", function () {
        var cardNumber = document.getElementById("cardNumber").value;
        var cvv = document.getElementById("cvv").value;
        var checkOut = document.getElementById("checkOut").value;

        var data = {
            cardNumber: cardNumber,
            cvv: cvv,
            checkOut: checkOut,
            vehicleId: vehicleId,
        };

        fetch('/Parking/ProcessCheckout', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.showToast) {
                        alert("Parking checkout completed successfully");
                } else {
                    alert('An error occurred while processing checkout.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
    });
}
</script>
